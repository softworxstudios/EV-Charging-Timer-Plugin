blueprint:
  name: EV Charging Timer (Percentage-Based)
  description: >-
    Starts a countdown as soon as the charger smart-plug turns on and
    switches it off after the calculated time
    ( percentage × max-charge-hours ).
  domain: automation
  author: SoftWorx Studios (2025) Version 1.0.0

  input:
    smart_plug:
      name: Charger Smart Plug
      selector:
        entity:
          domain: switch

    timer_entity:
      name: Timer Entity
      selector:
        entity:
          domain: timer

    charge_percentage:
      name: Charge Percentage Input
      selector:
        entity:
          domain: input_number

    max_charge_hours:
      name: Maximum Charge Time (hours)
      default: 6.5
      selector:
        number:
          min: 0.1
          max: 24
          step: 0.1
          unit_of_measurement: h

# ──────────────────────────── TRIGGERS ────────────────────────────
trigger:
  - platform: state
    entity_id: !input smart_plug
    to: "on"
    id: plug_on

  - platform: state
    entity_id: !input smart_plug
    to: "off"
    id: plug_off

  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_entity
    id: timer_finished

  - platform: state
    entity_id: !input charge_percentage
    id: percentage_changed

  # (optional) update every 30 s; remove if not needed
  - platform: time_pattern
    seconds: "/30"
    id: time_update

# ──────────────────────────── ACTIONS ─────────────────────────────
action:
  - choose:

      # ── 1 | Plug turned ON → start timer ──
      - conditions:
          - condition: trigger
            id: plug_on
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_entity

          - delay:
              seconds: 1

          - service: timer.start
            target:
              entity_id: !input timer_entity
            data:
              duration: >-
                {% set pct      = states(!input charge_percentage) | float %}
                {% set max_hrs  = !input max_charge_hours | float %}
                {{ ((pct / 100) * max_hrs * 3600) | int }}

      # ── 2 | Plug turned OFF → cancel timer ──
      - conditions:
          - condition: trigger
            id: plug_off
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_entity

      # ── 3 | Timer finished → turn plug OFF ──
      - conditions:
          - condition: trigger
            id: timer_finished
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input smart_plug

      # ── 4 | Percentage changed while charging ──
      - conditions:
          - condition: trigger
            id: percentage_changed
          - condition: state
            entity_id: !input smart_plug
            state: "on"
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input timer_entity

          - delay:
              seconds: 1

          - service: timer.start
            target:
              entity_id: !input timer_entity
            data:
              duration: >-
                {% set pct      = states(!input charge_percentage) | float %}
                {% set max_hrs  = !input max_charge_hours | float %}
                {{ ((pct / 100) * max_hrs * 3600) | int }}

      # ── 5 | (optional) 30-second updates ──
      - conditions:
          - condition: trigger
            id: time_update
        sequence:
          - service: persistent_notification.dismiss
            data:
              notification_id: timer_update_dummy
            enabled: false        # turn to true if you add real UI feedback

mode: single