blueprint:
  name: EV Charging Timer (Percentage-Based)
  description: A smart charging timer for electric vehicles that turns off charger after calculated time based on charging percentage.
  domain: automation
  source_url: https://github.com/softworxstudios/EV-Charging-Timer-Plugin/blob/main/EV_Charging_Timer_BluePrint.yaml
  author: SoftWorx Studios (2025)
  input:
    smart_plug:
      name: Charger Smart Plug
      description: Select the smart plug that controls your charger
      selector:
        entity:
          domain: switch
    timer_entity:
      name: Timer Entity
      description: Select a timer entity for countdown
      selector:
        entity:
          domain: timer
    charge_percentage:
      name: Charge Percentage Input
      description: Select an input_number for setting charge percentage
      selector:
        entity:
          domain: input_number
    max_charge_hours:
      name: Maximum Charge Time (hours)
      description: Time needed for a 100% charge
      default: 6.5
      selector:
        number:
          min: 0.1
          max: 24
          step: 0.1
          unit_of_measurement: hours

trigger:
  - platform: state
    entity_id: !input smart_plug
    to: "on"
    id: plug_on
  - platform: state
    entity_id: !input smart_plug
    to: "off"
    id: plug_off
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_entity
    id: timer_finished
  - platform: state
    entity_id: !input charge_percentage
    id: percentage_changed

action:
  - choose:
      - conditions:
          - condition: trigger
            id: plug_on
        sequence:
          - service: timer.cancel
            entity_id: !input timer_entity
          - delay:
              seconds: 1
          - service: timer.start
            entity_id: !input timer_entity
            data:
              duration: '{{ ((states(''input_charge_percentage'') | float / 100) * (states(''input.max_charge_hours'') | float * 3600)) | round(0) | timestamp_custom(''%H:%M:%S'', 0) }}'
      - conditions:
          - condition: trigger
            id: plug_off
        sequence:
          - service: timer.cancel
            entity_id: !input timer_entity
      - conditions:
          - condition: trigger
            id: timer_finished
        sequence:
          - service: switch.turn_off
            entity_id: !input smart_plug
      - conditions:
          - condition: trigger
            id: percentage_changed
          - condition: state
            entity_id: !input smart_plug
            state: "on"
        sequence:
          - service: timer.cancel
            entity_id: !input timer_entity
          - delay:
              seconds: 1
          - service: timer.start
            entity_id: !input timer_entity
            data:
              duration: '{{ ((states(''input_charge_percentage'') | float / 100) * (states(''input.max_charge_hours'') | float * 3600)) | round(0) | timestamp_custom(''%H:%M:%S'', 0) }}'
mode: single