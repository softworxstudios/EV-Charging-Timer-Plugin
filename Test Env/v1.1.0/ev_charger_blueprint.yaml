# Create updated blueprint with a number selector for charge percentage
updated_blueprint = '''
blueprint:
  name: EV Charger Automation with Dynamic Charge Percentage
  description: >
    Manage EV charging with timer control and UI-only progress updates, allowing users to adjust the max
    charge time (hours) and target charge percentage directly in the automation UI.
  domain: automation
  input:
    charger_switch:
      name: Charger Switch
      description: "Switch entity controlling the EV charger."
      selector:
        entity:
          domain: switch

    charge_timer:
      name: Charge Timer
      description: "Timer entity for the EV charging process."
      selector:
        entity:
          domain: timer

    max_charge_time:
      name: Max Charge Time (h)
      description: "Maximum time (in hours) for a 100% charge."
      default: 8.5
      selector:
        number:
          min: 1
          max: 24
          step: 0.5

    charge_percentage:
      name: Charge Percentage (%)
      description: "Target charge percentage (1–100%)."
      default: 80
      selector:
        number:
          min: 1
          max: 100
          step: 1

    progress_sensor:
      name: Charge Progress Sensor
      description: "Template sensor showing % charged (must exist)."
      selector:
        entity:
          domain: sensor

    time_remaining_sensor:
      name: Time Remaining Sensor
      description: "Template sensor showing time remaining (must exist)."
      selector:
        entity:
          domain: sensor

trigger:
  - platform: time_pattern
    seconds: "/5"
  - platform: state
    entity_id: !input charger_switch
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input charge_timer

condition: []

action:
  - choose:

      # 1) Charger turned ON → start timer based on %
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.platform == 'state' and trigger.to_state.state == 'on' }}
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input charge_timer
          - delay: "00:00:01"
          - service: timer.start
            target:
              entity_id: !input charge_timer
            data:
              duration: >
                {% set pct = !input charge_percentage | float %}
                {% set max_sec = (!input max_charge_time | float) * 3600 %}
                {% set total = (pct / 100 * max_sec) | int %}
                {% set h = total // 3600 %}
                {% set m = (total % 3600) // 60 %}
                {% set s = total % 60 %}
                {{ "%02d:%02d:%02d" | format(h, m, s) }}

      # 2) Timer finished → turn off charger
      - conditions:
          - condition: event
            event_type: timer.finished
            event_data:
              entity_id: !input charge_timer
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input charger_switch

      # 3) Charger turned OFF → cancel timer
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.platform == 'state' and trigger.to_state.state == 'off' }}
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input charge_timer

  # 4) Refresh sensors
  - service: homeassistant.update_entity
    target:
      entity_id:
        - !input progress_sensor
        - !input time_remaining_sensor

mode: restart
''' 

# Save the blueprint YAML to a file
target_file = 'ev_charger_blueprint_with_percentage_toggle.yaml'
with open(target_file, 'w') as f:
    f.write(updated_blueprint)

print(f'Blueprint saved to {target_file}')