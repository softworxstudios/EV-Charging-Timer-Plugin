# Update the blueprint to dynamically use the timer's duration attribute
updated_blueprint_dynamic_timer = """
blueprint:
  name: EV Charger Automation
  description: >
    Manage EV charging with timer control and UI-only progress updates, dynamically using the timer's duration.
  domain: automation
  input:
    charger_switch:
      name: Charger Switch
      description: "Switch entity controlling the EV charger."
      selector:
        entity:
          domain: switch

    charge_timer:
      name: Charge Timer
      description: "Timer entity for the EV charging process."
      selector:
        entity:
          domain: timer

    charge_percentage:
      name: Charge Percentage
      description: "Input-number helper for desired charge percentage (0–100)."
      selector:
        entity:
          domain: input_number

    progress_sensor:
      name: Charge Progress Sensor
      description: "Template sensor showing % charged (must exist in HA)."
      selector:
        entity:
          domain: sensor

    time_remaining_sensor:
      name: Time Remaining Sensor
      description: "Template sensor showing time remaining (must exist in HA)."
      selector:
        entity:
          domain: sensor

trigger:
  - platform: time_pattern
    seconds: "/5"
  - platform: state
    entity_id: !input charger_switch
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input charge_timer
  - platform: state
    entity_id: !input charge_percentage

condition: []

action:
  - choose:

      # 1) Charger turned ON → (re)start timer based on %
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.platform == 'state'
                 and trigger.to_state.state == 'on' }}
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input charge_timer
          - delay: "00:00:01"
          - service: timer.start
            target:
              entity_id: !input charge_timer
            data:
              duration: >
                {% set pct = states(!input charge_percentage) | float(0) %}
                {% set total = (pct / 100 * state_attr(!input charge_timer, 'duration').total_seconds()) | int %}
                {% set h = total // 3600 %}
                {% set m = (total % 3600) // 60 %}
                {% set s = total % 60 %}
                {{ "%02d:%02d:%02d" | format(h, m, s) }}

      # 2) Timer finished → turn off charger
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.platform == 'event'
                 and trigger.event.event_type == 'timer.finished' }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input charger_switch

      # 3) Charger turned OFF → cancel timer
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.platform == 'state'
                 and trigger.to_state.state == 'off' }}
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input charge_timer

      # 4) Charge % changed while charger is ON → restart timer
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.platform == 'state'
                 and trigger.entity_id == !input charge_percentage
                 and is_state(!input charger_switch, 'on') }}
        sequence:
          - service: timer.cancel
            target:
              entity_id: !input charge_timer
          - delay: "00:00:01"
          - service: timer.start
            target:
              entity_id: !input charge_timer
            data:
              duration: >
                {% set pct = states(!input charge_percentage) | float(0) %}
                {% set total = (pct / 100 * state_attr(!input charge_timer, 'duration').total_seconds()) | int %}
                {% set h = total // 3600 %}
                {% set m = (total % 3600) // 60 %}
                {% set s = total % 60 %}
                {{ "%02d:%02d:%02d" | format(h, m, s) }}

  # 5) Refresh both template sensors
  - service: homeassistant.update_entity
    target:
      entity_id:
        - !input progress_sensor
        - !input time_remaining_sensor

mode: restart
"""

# Save the updated blueprint to a new file
with open("ev_charger_blueprint_dynamic_timer.yaml", "w") as file:
    file.write(updated_blueprint_dynamic_timer)

"Updated blueprint with dynamic timer logic saved successfully."